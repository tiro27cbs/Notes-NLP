---
title: "Concepts and Explanations Long"
author: "Tim Roessling"
format: html
jupyter: myvenv
---


## Concepts and Explanations - Chapter 1 

### The Revolution in NLP

- The introduction of transformer models has dramatically advanced NLP, enabling models to learn from massive datasets using objectives like masked language modeling.
- Reinforcement Learning from Human Feedback (RLHF) further improves model alignment with human preferences.

### Language is Hard

- Language is complex due to infinite possible sentences and inherent ambiguity (both lexical and structural).
- Machines struggle with true understanding, and even advanced models may not fully replicate human-like comprehension.

### Brief History

- Descartes argued machines could never truly imitate humans, while Turing proposed the Turing Test to evaluate machine intelligence through conversation.
- Passing the Turing Test means a machine's responses are indistinguishable from a human's.

### NLP: The Basic Approach

- Text data is unstructured and context-dependent, unlike numerical or categorical data.
- Bag-of-words representations convert text into structured data but ignore word order and context, limiting understanding.

### Supervised ML for Text Processing

- Labeled text data enables tasks like spam detection, sentiment analysis, and topic detection.
- Raises questions about whether these approaches capture real language understanding.

### Bag-of-Words Limitation

- Bag-of-words ignores word order, so it cannot distinguish between sentences with the same words in different orders.

### Language Modeling with N-grams

- N-gram models assign probabilities to word sequences based on the Markov assumption (dependence on previous n-1 words).
- They capture local word order but struggle with long-range dependencies and rare phrases.

### Training an LLM

- LLMs are trained to predict the next word in a sequence, using neural networks and the softmax function to assign probabilities.
- Training involves computing loss based on prediction accuracy and updating model weights to improve future predictions.

### Probing GPT

- LLMs generate coherent, grammatical text and show some understanding of linguistic structure.
- They challenge previous claims about the impossibility of learning abstract linguistic knowledge from input alone.

### AI: Where Are We Heading?

- Artificial General Intelligence (AGI) aims for machines to match or surpass human cognitive abilities across tasks.
- Benchmarks include passing university exams, performing jobs, assembling furniture, and completing complex real-world tasks.

### Applications of LLMs

- LLMs are used in customer support, research portals, automated help desks, and accessibility tools.

### Takeaways

- Language is inherently difficult for machines due to its infinite and ambiguous nature.
- LLMs are approaching human-level language ability, and the field is advancing rapidly with significant societal impact expected.


## Concepts and Explanations - Chapter 2

### NLP Libraries

- **NLTK** and **spaCy** are two major Python libraries for NLP. NLTK is flexible and feature-rich but slower, while spaCy is faster and uses deep learning for tasks like POS tagging and NER.
- **TextBlob** is another library built on NLTK, offering a simple API for basic NLP tasks, but it is not suitable for large-scale production.

### Normalization

- Normalization standardizes text by converting to lowercase, removing punctuation, stopwords, extra spaces, and special characters.
- It prepares text for further processing and analysis by reducing noise and inconsistencies.

### Morphological Normalization

- Involves reducing words to their root or base form using **stemming** or **lemmatization**.
- Roots are the core part of words, while affixes (prefixes/suffixes) modify meaning or grammatical form.

### Tokenization

- Tokenization splits text into smaller units (tokens) such as words or sentences.
- Tokens are used for further processing like stemming, lemmatization, and POS tagging; a corpus is a collection of such texts.

### Stemming

- Stemming reduces words to their root form by removing suffixes, often using rule-based algorithms like Porter or Snowball stemmers.
- It is fast but may not always produce valid words, making it less accurate than lemmatization.

### Lemmatization

- Lemmatization maps words to their base or dictionary form (lemma) using vocabulary and POS information.
- It is more accurate than stemming but slower and requires more resources.

### Regular Expressions

- Regular expressions (regex) are used for pattern matching and text manipulation, such as searching, extracting, or replacing text patterns.
- Pythonâ€™s `re` module provides methods like `match`, `search`, `findall`, `split`, and `sub` for regex operations.

### POS Tagging

- Part-of-speech (POS) tagging assigns grammatical categories (noun, verb, adjective, etc.) to each word in a text.
- Methods include rule-based (using hand-crafted rules) and statistical (using machine learning models); spaCy and NLTK both support POS tagging.

### Named Entity Recognition (NER)

- NER identifies and classifies named entities (persons, organizations, locations, dates, etc.) in text.
- It is crucial for extracting structured information from unstructured text and is supported by both NLTK and spaCy.

## Concepts and Explanations - Chapter 3

### N-Gram Language Models

- N-gram models predict the probability of a word based on the previous n-1 words, commonly used for tasks like speech recognition and text generation.
- Types include unigram (single word), bigram (pair), and trigram (triplet), with the number of n-grams calculated as (total words) - (n - 1).

### Conditional Probability and Chain Rule

- Joint probability measures the likelihood of multiple events occurring together, while conditional probability measures the likelihood of one event given another.
- The chain rule allows calculation of the probability of a word sequence by multiplying conditional probabilities for each word given its context.

### Markov Assumption

- The Markov assumption simplifies language modeling by assuming a word depends only on the previous n-1 words, not the entire history.
- First-order (bigram) and second-order (trigram) Markov models are common, reducing computational complexity.

### N-Gram Probability Calculation & MLE

- The probability of a word sequence is estimated by counting n-gram occurrences and dividing by the count of the previous (n-1)-gram.
- Maximum Likelihood Estimation (MLE) can assign zero probability to unseen n-grams, which is a limitation for generalization.

### Padding

- Padding uses special tokens (e.g., `<s>`, `</s>`) at sentence boundaries to handle cases where context is missing at the start or end.
- The number of padding tokens depends on the n-gram order (e.g., two for trigrams).

### Underflow

- Underflow occurs when multiplying many small probabilities, resulting in values too small for computers to represent.
- Using log probabilities converts multiplication into addition, preventing underflow.

### Smoothing Techniques

- Smoothing addresses zero probabilities for unseen n-grams by assigning them small non-zero values.
- Techniques include Laplace (add-one), add-k, Good-Turing, backoff/interpolation, and Kneser-Ney smoothing, each with different strategies for adjusting probabilities.

### Perplexity

- Perplexity measures how well a language model predicts a text; lower perplexity indicates a better model.
- It is calculated as the inverse probability of the test set, normalized by the number of words.

### Practical Implementation

- Steps for building an n-gram model include tokenizing text, adding padding, generating n-grams, counting unique n-grams, calculating probabilities, and evaluating with perplexity.
- Python code examples demonstrate these steps, including smoothing and sentence generation.

## Concepts and Explanations - Chapter 4

### Text Classification

- Text classification assigns predefined categories to text documents using supervised, unsupervised, or deep learning methods.
- It is widely used in applications like spam detection, sentiment analysis, and topic categorization.
- The process involves data preprocessing, feature extraction, model training, and evaluation, with the choice of features and algorithms affecting performance.

### Types of Text Classification Techniques

- **Supervised Learning**: Uses labeled data to train models (e.g., Naive Bayes, Logistic Regression).
- **Unsupervised Learning**: Finds patterns or clusters in unlabeled data (e.g., LDA, K-means).
- **Deep Learning**: Employs neural networks to automatically learn complex features (e.g., CNNs, RNNs, Transformers).

### Bayes Theorem

- Bayes theorem relates conditional probabilities and is used to update the probability of a hypothesis given new evidence.
- In Naive Bayes, the "naive" assumption is that features are conditionally independent given the class label, simplifying probability calculations.

### Types of Naive Bayes Classifiers

- **Gaussian Naive Bayes**: For continuous features, assumes a normal distribution.
- **Multinomial Naive Bayes**: For discrete features like word counts.
- **Bernoulli Naive Bayes**: For binary features, such as word presence/absence.

### Implementing Naive Bayes

- Steps include loading and preprocessing data, splitting into train/test sets, extracting features (e.g., Bag of Words), training the classifier, and evaluating performance.

### Evaluation Metrics

- **Accuracy**: Proportion of correct predictions.
- **Precision**: Proportion of true positives among predicted positives.
- **Recall**: Proportion of true positives among actual positives.
- **F1-Score**: Harmonic mean of precision and recall, useful for imbalanced datasets.
- **Classification Report**: Summarizes these metrics for each class.

### Disadvantages of Naive Bayes

- The independence assumption may not hold, leading to suboptimal results.
- Zero probability for unseen features can be problematic.
- Probability estimates may be biased, especially for rare events.
- Performance drops with highly correlated features or large, sparse feature spaces.
- As a linear classifier, it may not capture complex relationships.

### Handling Class Imbalance

- **Resampling**: Oversample the minority class or undersample the majority class to balance the dataset.
- **Class Weights**: Assign higher weights to the minority class to penalize misclassification.
- **Ensemble Methods**: Use models like Random Forest or Gradient Boosting to improve robustness and performance on imbalanced data.

## Concepts and Explanations - Chapter 5

### Logistic Regression

- Logistic regression is a linear model for binary classification that estimates the probability of a class using the logistic (sigmoid) function.
- It outputs probabilities between 0 and 1, making it suitable for tasks like predicting customer churn or disease diagnosis.
- The model learns coefficients for each feature and a bias term, which together determine the decision boundary.

### Log-Odds (Logit)

- The log-odds (logit) is the logarithm of the odds ratio, representing the relationship between the probability of an event and its complement.
- In logistic regression, the log-odds are modeled as a linear combination of input features and their coefficients.
- This transformation allows for a linear relationship between features and the log-odds, even though the probability itself is non-linear.

### Training Logistic Regression

- Coefficients are estimated using Maximum Likelihood Estimation (MLE), which finds the values that maximize the likelihood of the observed data.
- Regularization techniques like L2 (Ridge), L1 (Lasso), and Elastic Net help prevent overfitting and can perform feature selection.
- Scikit-learn offers several solvers (liblinear, saga, newton-cg, lbfgs) optimized for different dataset sizes and regularization types.

### Bag of Words vs. TF-IDF

- **Bag of Words (BoW)** represents text as word count vectors, ignoring word order and context.
  - Simple and effective for many tasks, but can result in high-dimensional, sparse data and does not capture word importance.
- **TF-IDF** weighs words by their frequency in a document and their rarity across the corpus, highlighting more informative words.
  - Better for capturing word importance and semantic relevance, but still ignores word order and can be complex to implement.

### LR Model Assumptions

- Assumes a linear relationship between features and the log-odds of the outcome.
- Observations should be independent, and features should not be highly correlated (no multicollinearity).
- Assumes absence of extreme outliers, as these can distort model estimates.

### LR Limitations

- The linearity assumption may not hold for all datasets, limiting model performance.
- Sensitive to multicollinearity and outliers, which can affect coefficient stability and predictions.
- Cannot capture complex, non-linear relationships between features and the target variable.
- Requires a sufficiently large sample size (at least 10 times the number of features) to produce reliable results.

## Concepts and Explanations - Chapter 6

### Sentiment Analysis (SA)

- Sentiment analysis determines the sentiment or opinion expressed in text, classifying it as positive, negative, or neutral.
- A sentiment lexicon is a collection of words or phrases associated with specific sentiment scores, used to analyze the sentiment of text.
- Ekman's Six Basic Emotions (happiness, sadness, anger, fear, surprise, disgust) provide a foundation for categorizing emotional content.

### Resources for Sentiment Lexicons

- **VADER**: Designed for social media, VADER combines lexical features and rules to handle negations and intensifiers, providing sentiment scores from -1 to 1.
- **AFINN**: Contains 3300+ English words rated for sentiment on a scale from -5 to +5, useful for social media and online reviews.
- **SentiWordNet**: Assigns positive, negative, and objective scores to WordNet synsets, enabling nuanced sentiment analysis based on word context.
- **LIWC**: Categorizes words into psychological and linguistic categories, offering insights into emotional and cognitive aspects of text.

### Sentiment Analysis Approaches

- **Rule-based**: Uses predefined rules and lexicons to assign sentiment, relying on word lists and linguistic patterns. Simple and interpretable, but limited in handling context, sarcasm, and complex expressions.
- **Machine learning-based**: Trains models on labeled data to classify sentiment, using features like word frequencies or embeddings. More flexible and context-aware, but requires labeled data and may be less interpretable.
- **Hybrid**: Combines rule-based and machine learning methods to leverage the strengths of both, often using lexicons for initial scoring and ML models for refinement.

### Model Comparison

- Lexicon-based models (TextBlob, VADER) are simple and interpretable but struggle with negation and sarcasm.
- Deep learning models (LSTM, BERT) learn context and can handle complex sentiment, with BERT excelling at sarcasm and nuanced language.

### Python Libraries and Tools for SA

- **NLTK**: Provides tools for preprocessing and sentiment analysis, including VADER and WordNet integration.
- **TextBlob**: Offers a user-friendly API for sentiment analysis and other NLP tasks.
- **TensorFlow** and **PyTorch**: Enable building and training deep learning models for sentiment analysis.
- **Hugging Face Transformers**: Supplies pre-trained models (e.g., BERT) for advanced sentiment analysis and other NLP tasks.

### SA Challenges

- Lexicon-based methods struggle with context, sarcasm, ambiguity, cultural/domain-specific language, and negation.
- Words can have different meanings depending on context, and sarcasm or irony can invert the intended sentiment, making accurate classification difficult.

## Concepts and Explanations - Chapter 7

### Topic Modeling

- Topic modeling is an unsupervised machine learning technique for discovering abstract topics in a collection of documents.
- It helps organize, summarize, and search large text corpora by uncovering hidden thematic structures.

### Latent Dirichlet Allocation (LDA)

- LDA is a generative probabilistic model where each document is a mixture of topics, and each topic is a distribution over words.
- The model infers hidden topics by assuming documents are generated by mixing topics, and topics are generated by mixing words.

### LDA Intuition and Components

- Each document has a topic distribution, and each topic has a word distribution.
- The model assigns each word in a document to a topic, aiming to uncover the latent structure that best explains the observed words.

### LDA Parameters and Trade-offs

- Key parameters: document density (`Î±`), topic word density (`Î²`), and number of topics (`K`).
- LDA balances document sparsity (few topics per document) and topic sparsity (few words per topic).

### Parameter Estimation in LDA

- LDA uses Bayes' Theorem to estimate hidden variables, but exact inference is intractable.
- Common estimation methods include Expectation Maximization, Variational Inference, and Gibbs sampling (a Markov Chain Monte Carlo method).

### Gibbs Sampling in LDA

- Gibbs sampling iteratively updates topic assignments for each word, approximating the true topic structure.
- It encourages sparsity by favoring few topics per document and few words per topic.

### Practical Considerations for LDA

- LDA requires specifying the number of topics and works best with well-preprocessed, longer documents.
- It assumes a bag-of-words model, ignoring word order and semantic context.

### Visualizing and Using LDA Results

- LDA outputs document-topic and word-topic distributions, which can be used for document similarity, clustering, and visualization.

### Top2Vec

- Top2Vec is a modern topic modeling algorithm that embeds documents and words in a vector space, clusters them, and finds topics without needing to specify the number of topics.
- It uses dimensionality reduction (UMAP) and clustering (HDBSCAN), requiring minimal preprocessing but is computationally intensive.

### BERTopic

- BERTopic builds on Top2Vec by using transformer-based embeddings (e.g., BERT) for better topic quality, especially in nuanced or short texts.
- It uses class-based TF-IDF for topic extraction and is resource-intensive.

### K-means Clustering with Word2Vec

- Documents are embedded using Word2Vec and clustered with k-means, making it suitable for short texts.
- This approach is simple and fast but requires specifying the number of clusters.

### The Revolution in NLP: Transformers and LLMs

- The transformer model has revolutionized NLP, enabling large language models (LLMs) trained on massive datasets with objectives like masked language modeling.
- LLMs are further improved with Reinforcement Learning from Human Feedback (RLHF), aligning models with human preferences.

### Language is Hard

- Language is challenging for AI due to infinite possibilities, ambiguity (lexical and structural), and context dependence.
- LLMs have made significant progress but true human-like understanding remains debated.

### Brief History: Turing Test and AGI Benchmarks

- The Turing Test evaluates if a machine's behavior is indistinguishable from a human.
- AGI benchmarks include tasks like passing university exams, performing jobs, assembling furniture, and adapting to new environments.

### NLP: The Basic Approach

- Text data is converted into structured representations (e.g., bag-of-words, TF-IDF) for machine learning.
- Supervised ML enables tasks like spam detection and sentiment analysis, but bag-of-words ignores word order and context.

### Language Modeling with N-grams

- N-gram models assign probabilities to word sequences using the Markov assumption, capturing local word order but struggling with long-range dependencies.

### Training an LLM

- LLMs are trained to predict the next word in a sequence using neural networks and the softmax function.
- Training involves computing loss based on prediction accuracy and updating model weights iteratively.

### Probing GPT and LLM Capabilities

- LLMs generate coherent, grammatical text and demonstrate understanding of linguistic structure, challenging previous assumptions about language learning.

### Applications of LLMs

- LLMs are used in customer support, research portals, automated help desks, and accessibility tools, with growing societal impact.

### Takeaways

- Language is complex and ambiguous, but LLMs are rapidly advancing toward human-level language ability.
- The field is evolving quickly, with exciting research and significant real-world applications.

## Concepts and Explanations - Chapter 8

### Word Meanings

- Understanding word meanings is central to NLP, but meanings are often complex and context-dependent.
- Words can have multiple unrelated meanings (**homonymy**) or multiple related senses (**polysemy**), and the mapping between words and concepts is many-to-many.

### Word Relations

- **Synonymy**: Words with similar meanings (e.g., "big" and "large").
- **Antonymy**: Words with opposite meanings (e.g., "hot" and "cold").
- **Similarity and Relatedness**: Words can be similar (e.g., "cup" and "mug") or just related (e.g., "doctor" and "hospital").
- **Connotation**: Words carry emotional or cultural associations beyond their literal meaning (e.g., "childish" vs. "youthful").

---

### Vector Semantics

- Vector semantics represents words and documents as points (vectors) in a multidimensional space, allowing mathematical comparison of meanings.
- The distributional hypothesis states that words appearing in similar contexts tend to have similar meanings ("You shall know a word by the company it keeps").
- Words or documents are represented as vectors, often using term-document or word-context matrices.

#### Comparing Word Vectors

- **Cosine Similarity**: Measures the angle between two vectors, indicating how similar their directions are.
- **Euclidean Distance**: Measures the straight-line distance between vectors, reflecting overall difference.
- **Dot Product**: Quantifies similarity based on both direction and magnitude of vectors.
- These metrics help quantify semantic similarity or relatedness between words or documents.

---

### Word2Vec

#### Learning the Embeddings

- Word2Vec learns dense vector representations (embeddings) for words by training a classifier to distinguish real context pairs from random pairs.
- The model uses self-supervision: it learns from the natural co-occurrence of words in text, without human annotation.

#### How Word2Vec Learns Embeddings

- For each word, the model pairs it with nearby context words (positive examples) and with random words (negative examples).
- Logistic regression is used to train the model to distinguish positive from negative pairs, updating word vectors to maximize correct classification.
- After training, the classifier is discarded and the learned vectors are used as word embeddings.

#### Analogy Reasoning with Embeddings

- Word2Vec embeddings capture abstract relationships, enabling analogy tasks (e.g., "man" is to "king" as "woman" is to "queen").
- Vector arithmetic on embeddings can reveal such relationships, demonstrating the power of learned representations.

---

### Takeaways

- **Vector Semantics**: Dense vector representations enable mathematical operations on word meanings and support a wide range of NLP tasks.
- **Word2Vec**: Provides powerful, static word embeddings that capture semantic and syntactic relationships, useful for translation, sentiment analysis, and more.
- Practical steps include loading pre-trained embeddings, exploring similarities, solving analogies, and using embeddings for sentence classification or comparison with Bag-of-Words models.

## Concepts and Explanations - Chapter 9

### Ambiguity in Language

- Ambiguity occurs when a sentence or word can be interpreted in more than one way, posing a challenge for NLP systems.
- Types include **lexical ambiguity** (a word with multiple meanings) and **structural ambiguity** (a sentence with multiple possible parses).
- Addressing ambiguity often requires models that capture sentence structure, such as parse trees or dependency graphs.

---

### Simple Neural Networks and Neural Language Models

- Neural networks are composed of layers of units (neurons) that compute weighted sums of inputs, add a bias, and apply an activation function.
- The basic structure includes an input layer, one or more hidden layers, and an output layer, enabling the network to learn complex mappings from input to output.

---

### Activation Functions

- **Sigmoid** maps values to (0, 1), useful for probabilities but can cause vanishing gradients.
- **Tanh** maps values to (-1, 1), is zero-centered, and often preferred over sigmoid.
- **ReLU** outputs the input if positive, otherwise zero; it is computationally efficient and helps mitigate vanishing gradients.
- Activation functions introduce non-linearity, allowing networks to model complex relationships.

---

### Multi-Layer Neural Networks and XOR

- A single-layer perceptron can only solve linearly separable problems (like AND/OR), but not XOR, which is not linearly separable.
- Multi-layer networks with non-linear activation functions can learn complex functions like XOR by forming new representations in hidden layers.
- This demonstrates the power of deep neural networks to model non-linear patterns.

---

### Feedforward Neural Networks (Multilayer Perceptrons)

- Feedforward networks consist of multiple layers where information flows from input to output without cycles.
- Each layer transforms its input through learned weights and activation functions, enabling the network to learn hierarchical representations.
- Adding hidden layers allows the network to capture more complex patterns than simple linear models.

---

### Applying Feedforward Networks to NLP Tasks

- Feedforward networks can be used for text classification, language modeling, and other NLP tasks by learning from word embeddings rather than hand-crafted features.
- They can handle variable-length input using padding, truncation, or pooling methods (mean/max pooling).
- For multi-class classification, a softmax output layer is used to produce class probabilities.

---

### Training Neural Networks

- Training involves adjusting weights to minimize prediction error using **backpropagation** and **gradient descent**.
- The process includes a forward pass (prediction), loss computation, backward pass (gradient calculation), and weight updates.
- Training is iterative, and the learning rate controls the size of each update step; backpropagation efficiently computes gradients for all weights.

---

## Concepts and Explanations - Chapter 10

### Descartes and the Nature of Thought

- Philosophers have debated whether machines can truly "think" or only simulate understanding, raising questions about the nature of intelligence in AI.
- This philosophical background frames the challenge of building AI that genuinely understands language.

### The Turing Test

- Proposed by Alan Turing, this test evaluates if a machine's responses are indistinguishable from a human's in conversation.
- Passing the Turing Test is seen as a milestone for demonstrating machine intelligence.

### Singularity and AGI

- The Singularity is a hypothetical point where AI surpasses human intelligence, leading to rapid technological change.
- AGI (Artificial General Intelligence) refers to machines capable of performing any intellectual task that humans can do.

---

### The Challenge of Language

- Language allows infinite expression with finite words and rules, making it complex for machines to process.
- Sentences can have long-range dependencies, requiring models to capture relationships between distant words.

---

### Miracle of LLMs â€“ 3 Key Insights

1. **Bag of Words / N-grams:** Early models represented text as unordered words or short sequences, missing deeper context.
2. **Word Embeddings:** Words are mapped to vectors capturing semantic relationships, enabling analogies and richer understanding.
3. **The Transformer:** This architecture allows models to consider the entire context of a sentence, not just local word sequences.

---

### Word Embeddings

- Word embeddings are high-dimensional vectors representing word meanings and relationships (e.g., gender, capitals, comparatives).
- They enable models to perform analogy reasoning and capture semantic similarities.

---

### Transformers

#### The Problem with Static Embeddings

- Static embeddings assign the same vector to a word regardless of context, failing to capture context-dependent meanings.

#### Contextual Embeddings

- Contextual embeddings give each word a unique vector in each context, allowing the model to distinguish meanings based on surrounding words.

#### Attention Mechanism

- Attention enables each word to "attend" to other words in a sentence, integrating relevant information to build context-aware representations.
- This mechanism allows models to resolve ambiguities and capture complex dependencies.

#### Position Embeddings

- Since transformers lack inherent word order, position embeddings are added to word vectors to encode sequence information.

#### Output: Logits and Softmax

- The model outputs logits (raw scores) for each vocabulary word, which are converted to probabilities using the softmax function.

---

### BERT and Decoder-Only Models

#### BERT (Encoder-only)

- BERT produces rich, context-aware embeddings for each token and is best for classification and embedding tasks.
- It uses a special `[CLS]` token for sentence-level tasks and is fine-tuned for specific applications.

#### Decoder-Only Models (e.g., GPT)

- These models generate text by predicting the next word in a sequence, making them suitable for text generation and chatbots.

---

### Large Language Models (LLMs)

- LLMs are neural networks trained to predict the next word, enabling them to generate coherent and contextually relevant text.
- They learn language, facts, and reasoning by training on massive datasets.

---

### Decoding and Sampling

- Decoding is the process of choosing the next word during text generation, balancing quality and diversity.
- Methods include random sampling, top-k, top-p (nucleus) sampling, and temperature adjustment, each affecting output creativity and coherence.

---

### Pretraining and Self-Supervised Learning

- LLMs are pretrained on large text corpora using self-supervised learning, where the next word prediction serves as the training signal.
- Cross-entropy loss is used to optimize the model, and pretraining imparts factual, linguistic, and commonsense knowledge.

---

### Working with Large Language Models

#### Model Types

- **Base Model:** Pretrained on large corpora.
- **Instruct Model:** Fine-tuned to follow instructions.
- **Chat Model:** Further tuned for dialogue.

#### Key Settings

- Parameters like temperature, top-p, max length, and penalties control output randomness, diversity, and length.

#### Prompt Structure and Techniques

- Effective prompts include instructions, context, input data, and output indicators.
- Prompting techniques: zero-shot (no examples), few-shot (with examples), and chain-of-thought (step-by-step reasoning).

---

### Takeaways

- Transformers use attention for context-aware word representations.
- BERT is best for classification and embeddings; GPT is best for text generation.
- Prompt engineering is crucial for effective use of LLMs.



## Concepts and Explanations - Chapter 11

### Information Retrieval (IR)

- IR is the process of finding relevant documents from a large collection based on a user's query.
- Documents and queries are represented as vectors (e.g., bag-of-words, TF-IDF), and similarity (often cosine similarity) is used to rank results.
- Key metrics include precision (fraction of retrieved documents that are relevant) and recall (fraction of relevant documents that are retrieved).

### Vector Space Model & TF-IDF

- The vector space model represents documents and queries as vectors in a high-dimensional space, enabling similarity computation.
- TF-IDF (Term Frequencyâ€“Inverse Document Frequency) weighs terms by their importance: frequent in a document but rare in the collection.
- This approach helps distinguish important terms and improves retrieval effectiveness.

### Dense Retrieval with Neural Models

- Dense retrieval uses neural networks (e.g., BERT) to encode queries and documents into dense embeddings.
- Similarity between embeddings is used to match queries and documents, allowing for semantic matching beyond exact word overlap.
- This helps address vocabulary mismatch, where different words or phrases express the same meaning.

### Question Answering Datasets

- Datasets like SQuAD provide passages and questions, with answers as text spans within the passage.
- SQuAD 2.0 introduces unanswerable questions to test model robustness.
- These datasets are benchmarks for evaluating extractive QA systems.

### Extractive Question Answering

- Extractive QA involves selecting a span of text from a passage as the answer to a question.
- Models (e.g., BERT) predict the start and end positions of the answer span within the passage.
- This approach is widely used for reading comprehension tasks.

### Entity Linking (Wikification)

- Entity linking maps mentions in text to specific entities in a knowledge base (e.g., Wikipedia pages).
- It involves mention detection, candidate generation, and disambiguation based on context.
- This process grounds text to structured knowledge, improving retrieval and reasoning.

### Knowledge-based Question Answering (KBQA)

- KBQA answers questions by mapping them to queries over structured knowledge bases (e.g., DBpedia, Wikidata).
- Approaches include graph-based QA (traversing entity-relation graphs) and semantic parsing (mapping questions to logical forms).
- RDF triples (subject, predicate, object) are a common data structure for representing facts.

### Supervision for Semantic Parsing

- Fully supervised approaches use annotated logical forms for each question.
- Weakly supervised approaches use only the answer (denotation), treating the logical form as a latent variable.
- Supervision level affects the complexity and scalability of KBQA systems.

### Retrieve-and-Generate (RAG)

- RAG combines retrieval of relevant documents or passages with generative LLMs to produce answers.
- The workflow involves retrieving relevant chunks, combining them with the question, and generating an answer using an LLM.
- This approach enables up-to-date and contextually grounded answers.

### Evaluation of RAG Systems

- Retrieval evaluation checks if relevant chunks are retrieved (precision, recall).
- Generation evaluation assesses if the answer is correct, relevant, and faithful to the retrieved context (metrics: BLEU, ROUGE, LLM-based judgments).
- Faithfulness and answer/context relevance are key criteria; hallucinations should be avoided.

### Agents

- Agents are systems capable of forming intentions, making plans, and acting to achieve goals, often using internal representations.
- In practice, LLM-based agents control application flow (e.g., LangChain agents) and can process text, audio, or visual input via modality fusion.
- Agents extend LLMs' capabilities to multi-step reasoning and action-taking.

### Formal vs. Functional Abilities of LLMs

- Formal linguistic competence refers to knowledge of grammar and language rules; functional competence is the ability to use language in real-world contexts.
- LLMs excel at formal competence but may struggle with functional competence, such as real-world reasoning and understanding.
- Evaluation should consider both types of competence and be aware of common fallacies (e.g., "good at language â†’ good at thought").

### Takeaways

- Question answering can be approached via IR, KBQA, or LLM-based methods (including RAG and agents).
- Key datasets include SQuAD, SimpleQuestions, and RDF-based resources like DBpedia.
- LLMs are powerful for formal linguistic tasks, but functional, real-world understanding remains a challenge.

